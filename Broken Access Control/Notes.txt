
Lab #06: Change of method
Lab #07: User ID controlled by request parameter(Change the value id parameter in the url)
Lab #08: User ID controlled by request parameter, with unpredictable user IDs. The userid is not predictable. A blog post reveals the user id of the author. 
Lab #09: User ID controlled by request parameter with data leakage in redirect.
Login with wiener user and try to change the userid to carlos, we are redirected to login while redircting the API of carlos is leaked

Lab #10: User ID controlled by request parameter with password disclosure
1. Login with wiener user. Change the id to carlos, there is a hidden password, view it in page source. Login with carlos user. 
Change the id to administrator in the url. view page source to get the hidden password

Lab #11: Insecure direct object references
This lab stores user chat logs directly on the server's file system, and retrieves them using static URLs. 
1. Start chatting by clicking on the chat link.
2. Click on download the transcript, it will redirect to the below url, change the value from 2 to 1.
https://0a3600cb04628445815ea37700d500de.web-security-academy.net/download-transcript/2.txt

Lab #12: Multi-step process with no access control on one step 
1. Login with admin account and promote user carlos to admin and intercept the requests while promoting the carlos.
Login with user wiener in private window and copy the cookie and paste in the burp in confirming the promotion of user to admin.
also, change the user to wiener.

Lab #13: Referer-based access control 
1. Login with administrator account and look at the functionality. Promote user carlos to admin while intercept is on. Send the request 
to repeater
2. Login with with wiener in private window and copy cookie from browser and paste it in to the burp replacing the admin cookie. 
3. Change the user from carlos to wiener and promote it to admin




/admin/deleteUser and /admin/deleteUser/ are treated as a distinct endpoints
